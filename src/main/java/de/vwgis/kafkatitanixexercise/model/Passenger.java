/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.vwgis.kafkatitanixexercise.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Passenger extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8803917622247325666L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Passenger\",\"namespace\":\"de.vwgis.kafkatitanixexercise.model\",\"fields\":[{\"name\":\"passengerId\",\"type\":\"int\"},{\"name\":\"survived\",\"type\":\"boolean\"},{\"name\":\"pClass\",\"type\":\"int\",\"default\":3},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"double\",\"default\":0.0},{\"name\":\"sibSp\",\"type\":\"int\"},{\"name\":\"parch\",\"type\":\"int\"},{\"name\":\"ticket\",\"type\":\"string\"},{\"name\":\"fare\",\"type\":\"double\",\"default\":0.0},{\"name\":\"cabin\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"embarked\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Passenger> ENCODER =
          new BinaryMessageEncoder<Passenger>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Passenger> DECODER =
          new BinaryMessageDecoder<Passenger>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Passenger> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Passenger> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Passenger> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Passenger>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Passenger to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Passenger from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Passenger instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Passenger fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int passengerId;
  private boolean survived;
  private int pClass;
  private java.lang.CharSequence name;
  private java.lang.CharSequence sex;
  private double age;
  private int sibSp;
  private int parch;
  private java.lang.CharSequence ticket;
  private double fare;
  private java.lang.CharSequence cabin;
  private java.lang.CharSequence embarked;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Passenger() {}

  /**
   * All-args constructor.
   * @param passengerId The new value for passengerId
   * @param survived The new value for survived
   * @param pClass The new value for pClass
   * @param name The new value for name
   * @param sex The new value for sex
   * @param age The new value for age
   * @param sibSp The new value for sibSp
   * @param parch The new value for parch
   * @param ticket The new value for ticket
   * @param fare The new value for fare
   * @param cabin The new value for cabin
   * @param embarked The new value for embarked
   */
  public Passenger(java.lang.Integer passengerId, java.lang.Boolean survived, java.lang.Integer pClass, java.lang.CharSequence name, java.lang.CharSequence sex, java.lang.Double age, java.lang.Integer sibSp, java.lang.Integer parch, java.lang.CharSequence ticket, java.lang.Double fare, java.lang.CharSequence cabin, java.lang.CharSequence embarked) {
    this.passengerId = passengerId;
    this.survived = survived;
    this.pClass = pClass;
    this.name = name;
    this.sex = sex;
    this.age = age;
    this.sibSp = sibSp;
    this.parch = parch;
    this.ticket = ticket;
    this.fare = fare;
    this.cabin = cabin;
    this.embarked = embarked;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return passengerId;
      case 1: return survived;
      case 2: return pClass;
      case 3: return name;
      case 4: return sex;
      case 5: return age;
      case 6: return sibSp;
      case 7: return parch;
      case 8: return ticket;
      case 9: return fare;
      case 10: return cabin;
      case 11: return embarked;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: passengerId = (java.lang.Integer)value$; break;
      case 1: survived = (java.lang.Boolean)value$; break;
      case 2: pClass = (java.lang.Integer)value$; break;
      case 3: name = (java.lang.CharSequence)value$; break;
      case 4: sex = (java.lang.CharSequence)value$; break;
      case 5: age = (java.lang.Double)value$; break;
      case 6: sibSp = (java.lang.Integer)value$; break;
      case 7: parch = (java.lang.Integer)value$; break;
      case 8: ticket = (java.lang.CharSequence)value$; break;
      case 9: fare = (java.lang.Double)value$; break;
      case 10: cabin = (java.lang.CharSequence)value$; break;
      case 11: embarked = (java.lang.CharSequence)value$; break;
      default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'passengerId' field.
   * @return The value of the 'passengerId' field.
   */
  public int getPassengerId() {
    return passengerId;
  }


  /**
   * Sets the value of the 'passengerId' field.
   * @param value the value to set.
   */
  public void setPassengerId(int value) {
    this.passengerId = value;
  }

  /**
   * Gets the value of the 'survived' field.
   * @return The value of the 'survived' field.
   */
  public boolean getSurvived() {
    return survived;
  }


  /**
   * Sets the value of the 'survived' field.
   * @param value the value to set.
   */
  public void setSurvived(boolean value) {
    this.survived = value;
  }

  /**
   * Gets the value of the 'pClass' field.
   * @return The value of the 'pClass' field.
   */
  public int getPClass() {
    return pClass;
  }


  /**
   * Sets the value of the 'pClass' field.
   * @param value the value to set.
   */
  public void setPClass(int value) {
    this.pClass = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sex' field.
   * @return The value of the 'sex' field.
   */
  public java.lang.CharSequence getSex() {
    return sex;
  }


  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(java.lang.CharSequence value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public double getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(double value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'sibSp' field.
   * @return The value of the 'sibSp' field.
   */
  public int getSibSp() {
    return sibSp;
  }


  /**
   * Sets the value of the 'sibSp' field.
   * @param value the value to set.
   */
  public void setSibSp(int value) {
    this.sibSp = value;
  }

  /**
   * Gets the value of the 'parch' field.
   * @return The value of the 'parch' field.
   */
  public int getParch() {
    return parch;
  }


  /**
   * Sets the value of the 'parch' field.
   * @param value the value to set.
   */
  public void setParch(int value) {
    this.parch = value;
  }

  /**
   * Gets the value of the 'ticket' field.
   * @return The value of the 'ticket' field.
   */
  public java.lang.CharSequence getTicket() {
    return ticket;
  }


  /**
   * Sets the value of the 'ticket' field.
   * @param value the value to set.
   */
  public void setTicket(java.lang.CharSequence value) {
    this.ticket = value;
  }

  /**
   * Gets the value of the 'fare' field.
   * @return The value of the 'fare' field.
   */
  public double getFare() {
    return fare;
  }


  /**
   * Sets the value of the 'fare' field.
   * @param value the value to set.
   */
  public void setFare(double value) {
    this.fare = value;
  }

  /**
   * Gets the value of the 'cabin' field.
   * @return The value of the 'cabin' field.
   */
  public java.lang.CharSequence getCabin() {
    return cabin;
  }


  /**
   * Sets the value of the 'cabin' field.
   * @param value the value to set.
   */
  public void setCabin(java.lang.CharSequence value) {
    this.cabin = value;
  }

  /**
   * Gets the value of the 'embarked' field.
   * @return The value of the 'embarked' field.
   */
  public java.lang.CharSequence getEmbarked() {
    return embarked;
  }


  /**
   * Sets the value of the 'embarked' field.
   * @param value the value to set.
   */
  public void setEmbarked(java.lang.CharSequence value) {
    this.embarked = value;
  }

  /**
   * Creates a new Passenger RecordBuilder.
   * @return A new Passenger RecordBuilder
   */
  public static de.vwgis.kafkatitanixexercise.model.Passenger.Builder newBuilder() {
    return new de.vwgis.kafkatitanixexercise.model.Passenger.Builder();
  }

  /**
   * Creates a new Passenger RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Passenger RecordBuilder
   */
  public static de.vwgis.kafkatitanixexercise.model.Passenger.Builder newBuilder(de.vwgis.kafkatitanixexercise.model.Passenger.Builder other) {
    if (other == null) {
      return new de.vwgis.kafkatitanixexercise.model.Passenger.Builder();
    } else {
      return new de.vwgis.kafkatitanixexercise.model.Passenger.Builder(other);
    }
  }

  /**
   * Creates a new Passenger RecordBuilder by copying an existing Passenger instance.
   * @param other The existing instance to copy.
   * @return A new Passenger RecordBuilder
   */
  public static de.vwgis.kafkatitanixexercise.model.Passenger.Builder newBuilder(de.vwgis.kafkatitanixexercise.model.Passenger other) {
    if (other == null) {
      return new de.vwgis.kafkatitanixexercise.model.Passenger.Builder();
    } else {
      return new de.vwgis.kafkatitanixexercise.model.Passenger.Builder(other);
    }
  }

  /**
   * RecordBuilder for Passenger instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Passenger>
          implements org.apache.avro.data.RecordBuilder<Passenger> {

    private int passengerId;
    private boolean survived;
    private int pClass;
    private java.lang.CharSequence name;
    private java.lang.CharSequence sex;
    private double age;
    private int sibSp;
    private int parch;
    private java.lang.CharSequence ticket;
    private double fare;
    private java.lang.CharSequence cabin;
    private java.lang.CharSequence embarked;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.vwgis.kafkatitanixexercise.model.Passenger.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[0].schema(), other.passengerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.survived)) {
        this.survived = data().deepCopy(fields()[1].schema(), other.survived);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pClass)) {
        this.pClass = data().deepCopy(fields()[2].schema(), other.pClass);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sex)) {
        this.sex = data().deepCopy(fields()[4].schema(), other.sex);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.age)) {
        this.age = data().deepCopy(fields()[5].schema(), other.age);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sibSp)) {
        this.sibSp = data().deepCopy(fields()[6].schema(), other.sibSp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.parch)) {
        this.parch = data().deepCopy(fields()[7].schema(), other.parch);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.ticket)) {
        this.ticket = data().deepCopy(fields()[8].schema(), other.ticket);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.fare)) {
        this.fare = data().deepCopy(fields()[9].schema(), other.fare);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.cabin)) {
        this.cabin = data().deepCopy(fields()[10].schema(), other.cabin);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.embarked)) {
        this.embarked = data().deepCopy(fields()[11].schema(), other.embarked);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Passenger instance
     * @param other The existing instance to copy.
     */
    private Builder(de.vwgis.kafkatitanixexercise.model.Passenger other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[0].schema(), other.passengerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.survived)) {
        this.survived = data().deepCopy(fields()[1].schema(), other.survived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pClass)) {
        this.pClass = data().deepCopy(fields()[2].schema(), other.pClass);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sex)) {
        this.sex = data().deepCopy(fields()[4].schema(), other.sex);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.age)) {
        this.age = data().deepCopy(fields()[5].schema(), other.age);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sibSp)) {
        this.sibSp = data().deepCopy(fields()[6].schema(), other.sibSp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.parch)) {
        this.parch = data().deepCopy(fields()[7].schema(), other.parch);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ticket)) {
        this.ticket = data().deepCopy(fields()[8].schema(), other.ticket);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.fare)) {
        this.fare = data().deepCopy(fields()[9].schema(), other.fare);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.cabin)) {
        this.cabin = data().deepCopy(fields()[10].schema(), other.cabin);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.embarked)) {
        this.embarked = data().deepCopy(fields()[11].schema(), other.embarked);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Gets the value of the 'passengerId' field.
     * @return The value.
     */
    public int getPassengerId() {
      return passengerId;
    }


    /**
     * Sets the value of the 'passengerId' field.
     * @param value The value of 'passengerId'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setPassengerId(int value) {
      validate(fields()[0], value);
      this.passengerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'passengerId' field has been set.
     * @return True if the 'passengerId' field has been set, false otherwise.
     */
    public boolean hasPassengerId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'passengerId' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearPassengerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'survived' field.
     * @return The value.
     */
    public boolean getSurvived() {
      return survived;
    }


    /**
     * Sets the value of the 'survived' field.
     * @param value The value of 'survived'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setSurvived(boolean value) {
      validate(fields()[1], value);
      this.survived = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'survived' field has been set.
     * @return True if the 'survived' field has been set, false otherwise.
     */
    public boolean hasSurvived() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'survived' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearSurvived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'pClass' field.
     * @return The value.
     */
    public int getPClass() {
      return pClass;
    }


    /**
     * Sets the value of the 'pClass' field.
     * @param value The value of 'pClass'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setPClass(int value) {
      validate(fields()[2], value);
      this.pClass = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'pClass' field has been set.
     * @return True if the 'pClass' field has been set, false otherwise.
     */
    public boolean hasPClass() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'pClass' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearPClass() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'name' field.
     * @return The value.
     */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
     * Sets the value of the 'name' field.
     * @param value The value of 'name'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'name' field has been set.
     * @return True if the 'name' field has been set, false otherwise.
     */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'name' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'sex' field.
     * @return The value.
     */
    public java.lang.CharSequence getSex() {
      return sex;
    }


    /**
     * Sets the value of the 'sex' field.
     * @param value The value of 'sex'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setSex(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.sex = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'sex' field has been set.
     * @return True if the 'sex' field has been set, false otherwise.
     */
    public boolean hasSex() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'sex' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearSex() {
      sex = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'age' field.
     * @return The value.
     */
    public double getAge() {
      return age;
    }


    /**
     * Sets the value of the 'age' field.
     * @param value The value of 'age'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setAge(double value) {
      validate(fields()[5], value);
      this.age = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'age' field has been set.
     * @return True if the 'age' field has been set, false otherwise.
     */
    public boolean hasAge() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'age' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearAge() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'sibSp' field.
     * @return The value.
     */
    public int getSibSp() {
      return sibSp;
    }


    /**
     * Sets the value of the 'sibSp' field.
     * @param value The value of 'sibSp'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setSibSp(int value) {
      validate(fields()[6], value);
      this.sibSp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'sibSp' field has been set.
     * @return True if the 'sibSp' field has been set, false otherwise.
     */
    public boolean hasSibSp() {
      return fieldSetFlags()[6];
    }


    /**
     * Clears the value of the 'sibSp' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearSibSp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'parch' field.
     * @return The value.
     */
    public int getParch() {
      return parch;
    }


    /**
     * Sets the value of the 'parch' field.
     * @param value The value of 'parch'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setParch(int value) {
      validate(fields()[7], value);
      this.parch = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'parch' field has been set.
     * @return True if the 'parch' field has been set, false otherwise.
     */
    public boolean hasParch() {
      return fieldSetFlags()[7];
    }


    /**
     * Clears the value of the 'parch' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearParch() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
     * Gets the value of the 'ticket' field.
     * @return The value.
     */
    public java.lang.CharSequence getTicket() {
      return ticket;
    }


    /**
     * Sets the value of the 'ticket' field.
     * @param value The value of 'ticket'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setTicket(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.ticket = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
     * Checks whether the 'ticket' field has been set.
     * @return True if the 'ticket' field has been set, false otherwise.
     */
    public boolean hasTicket() {
      return fieldSetFlags()[8];
    }


    /**
     * Clears the value of the 'ticket' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearTicket() {
      ticket = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
     * Gets the value of the 'fare' field.
     * @return The value.
     */
    public double getFare() {
      return fare;
    }


    /**
     * Sets the value of the 'fare' field.
     * @param value The value of 'fare'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setFare(double value) {
      validate(fields()[9], value);
      this.fare = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
     * Checks whether the 'fare' field has been set.
     * @return True if the 'fare' field has been set, false otherwise.
     */
    public boolean hasFare() {
      return fieldSetFlags()[9];
    }


    /**
     * Clears the value of the 'fare' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearFare() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
     * Gets the value of the 'cabin' field.
     * @return The value.
     */
    public java.lang.CharSequence getCabin() {
      return cabin;
    }


    /**
     * Sets the value of the 'cabin' field.
     * @param value The value of 'cabin'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setCabin(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.cabin = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
     * Checks whether the 'cabin' field has been set.
     * @return True if the 'cabin' field has been set, false otherwise.
     */
    public boolean hasCabin() {
      return fieldSetFlags()[10];
    }


    /**
     * Clears the value of the 'cabin' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearCabin() {
      cabin = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
     * Gets the value of the 'embarked' field.
     * @return The value.
     */
    public java.lang.CharSequence getEmbarked() {
      return embarked;
    }


    /**
     * Sets the value of the 'embarked' field.
     * @param value The value of 'embarked'.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder setEmbarked(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.embarked = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
     * Checks whether the 'embarked' field has been set.
     * @return True if the 'embarked' field has been set, false otherwise.
     */
    public boolean hasEmbarked() {
      return fieldSetFlags()[11];
    }


    /**
     * Clears the value of the 'embarked' field.
     * @return This builder.
     */
    public de.vwgis.kafkatitanixexercise.model.Passenger.Builder clearEmbarked() {
      embarked = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Passenger build() {
      try {
        Passenger record = new Passenger();
        record.passengerId = fieldSetFlags()[0] ? this.passengerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.survived = fieldSetFlags()[1] ? this.survived : (java.lang.Boolean) defaultValue(fields()[1]);
        record.pClass = fieldSetFlags()[2] ? this.pClass : (java.lang.Integer) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.sex = fieldSetFlags()[4] ? this.sex : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.age = fieldSetFlags()[5] ? this.age : (java.lang.Double) defaultValue(fields()[5]);
        record.sibSp = fieldSetFlags()[6] ? this.sibSp : (java.lang.Integer) defaultValue(fields()[6]);
        record.parch = fieldSetFlags()[7] ? this.parch : (java.lang.Integer) defaultValue(fields()[7]);
        record.ticket = fieldSetFlags()[8] ? this.ticket : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.fare = fieldSetFlags()[9] ? this.fare : (java.lang.Double) defaultValue(fields()[9]);
        record.cabin = fieldSetFlags()[10] ? this.cabin : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.embarked = fieldSetFlags()[11] ? this.embarked : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Passenger>
          WRITER$ = (org.apache.avro.io.DatumWriter<Passenger>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Passenger>
          READER$ = (org.apache.avro.io.DatumReader<Passenger>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException
  {
    out.writeInt(this.passengerId);

    out.writeBoolean(this.survived);

    out.writeInt(this.pClass);

    out.writeString(this.name);

    out.writeString(this.sex);

    out.writeDouble(this.age);

    out.writeInt(this.sibSp);

    out.writeInt(this.parch);

    out.writeString(this.ticket);

    out.writeDouble(this.fare);

    out.writeString(this.cabin);

    out.writeString(this.embarked);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.passengerId = in.readInt();

      this.survived = in.readBoolean();

      this.pClass = in.readInt();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.sex = in.readString(this.sex instanceof Utf8 ? (Utf8)this.sex : null);

      this.age = in.readDouble();

      this.sibSp = in.readInt();

      this.parch = in.readInt();

      this.ticket = in.readString(this.ticket instanceof Utf8 ? (Utf8)this.ticket : null);

      this.fare = in.readDouble();

      this.cabin = in.readString(this.cabin instanceof Utf8 ? (Utf8)this.cabin : null);

      this.embarked = in.readString(this.embarked instanceof Utf8 ? (Utf8)this.embarked : null);

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.passengerId = in.readInt();
            break;

          case 1:
            this.survived = in.readBoolean();
            break;

          case 2:
            this.pClass = in.readInt();
            break;

          case 3:
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
            break;

          case 4:
            this.sex = in.readString(this.sex instanceof Utf8 ? (Utf8)this.sex : null);
            break;

          case 5:
            this.age = in.readDouble();
            break;

          case 6:
            this.sibSp = in.readInt();
            break;

          case 7:
            this.parch = in.readInt();
            break;

          case 8:
            this.ticket = in.readString(this.ticket instanceof Utf8 ? (Utf8)this.ticket : null);
            break;

          case 9:
            this.fare = in.readDouble();
            break;

          case 10:
            this.cabin = in.readString(this.cabin instanceof Utf8 ? (Utf8)this.cabin : null);
            break;

          case 11:
            this.embarked = in.readString(this.embarked instanceof Utf8 ? (Utf8)this.embarked : null);
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
